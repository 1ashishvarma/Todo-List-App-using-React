{"version":3,"sources":["Components/Todo.js","Components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodo","todoList","length","map","todo","className","key","id","content","onClick","AddTodo","state","contenet","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","htmlFor","onChange","type","Component","TodoList","message","filter","classMessage","setTimeout","Math","floor","random","Todo","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"6OA6BeA,EA3BH,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAMC,EAAc,EAAdA,WAGXC,EAASF,EAAMG,OACjBH,EAAMI,KAAI,SAAAC,GACN,OACC,yBAAKC,UAAU,QAAQC,IAAKF,EAAKG,IAC7B,yBAAKF,UAAU,aACV,uBAAGA,UAAU,QAAQD,EAAKI,SAC1B,4BAAQC,QAAS,WAAKT,EAAWI,EAAKG,MAAtC,eAQd,uBAAGF,UAAU,WAAb,0BAEH,OACI,yBAAKA,UAAU,SACVJ,ICaES,G,kNA/BXC,MAAM,CACFC,SAAS,I,EAEjBC,aAAa,SAACC,GAEV,EAAKC,SAAS,CACVP,QAAQM,EAAEE,OAAOC,S,EAIzBC,aAAa,SAACJ,GACVA,EAAEK,iBACF,EAAKC,MAAMC,QAAQ,EAAKV,OACxB,EAAKI,SAAS,CACVP,QAAQ,M,uDAOR,OACA,yBAAKH,UAAU,WACX,0BAAMiB,SAAUC,KAAKL,cACjB,2BAAOM,QAAQ,WAAf,YACA,2BAAOP,MAAOM,KAAKZ,MAAMH,SAAS,GAAIiB,SAAUF,KAAKV,aAAea,KAAK,e,GA1BnEC,cCsDPC,E,4MArDbjB,MAAM,CACJZ,MAAM,CACJ,CAACQ,GAAG,EAAEC,QAAQ,eACd,CAACD,GAAG,EAAEC,QAAQ,iBAEhBqB,QAAQ,I,EAGV7B,WAAW,SAACO,GACV,IAAMR,EAAM,EAAKY,MAAMZ,MAAM+B,QAAO,SAAA1B,GAClC,OAAOA,EAAKG,KAAKA,KAEpB,EAAKQ,SAAS,CACZhB,MAAMA,EACN8B,QAAQ,qCACRE,aAAa,WAEfC,YAAW,WACV,EAAKjB,SAAS,CACZc,QAAQ,OAEV,M,EAEFR,QAAQ,SAACjB,GACPA,EAAKG,GAAG0B,KAAKC,MAAoB,IAAdD,KAAKE,UACxB,IAAMpC,EAAM,GAAD,mBAAK,EAAKY,MAAMZ,OAAhB,CAAsBK,IACjC,EAAKW,SAAS,CACZhB,MAAMA,EACN8B,QAAQ,uCACRE,aAAa,YAEfC,YAAW,WACT,EAAKjB,SAAS,CACZc,QAAQ,OAEV,M,uDAGF,IAAMA,EAA6B,KAArBN,KAAKZ,MAAMkB,QACvB,yBAAKxB,UAAS,kBAAakB,KAAKZ,MAAMoB,eACpC,2BAAIR,KAAKZ,MAAMkB,UAEhB,4BACH,OACE,yBAAKxB,UAAU,OACb,4CACCwB,EACD,kBAACO,EAAD,CAAOpC,WAAYuB,KAAKvB,WAAYD,MAAOwB,KAAKZ,MAAMZ,QACtD,kBAAC,EAAD,CAASsB,QAASE,KAAKF,e,GAjDRgB,IAAMV,WCQTW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3B,a","file":"static/js/main.f3211900.chunk.js","sourcesContent":["import React from'react';\r\n\r\nconst Todos=({todos,deleteTodo})=>{\r\n    //console.log(deleteTodo);\r\n   //console.log(todos);\r\n   const todoList=todos.length?(\r\n       todos.map(todo=>{\r\n           return(\r\n            <div className=\"todos\" key={todo.id}>\r\n                <div className=\"todo-wrap\">\r\n                     <p className=\"todo\">{todo.content}</p>\r\n                     <button onClick={()=>{deleteTodo(todo.id)}}>Remove</button>\r\n                </div>\r\n            </div>\r\n           )\r\n       }\r\n        )\r\n\r\n   ):(\r\n       <p className=\"no-todo\">You have no todo left.</p>)\r\n  \r\n    return(\r\n        <div className=\"todos\" >\r\n            {todoList}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Todos;","//import React from 'react';\r\nimport React, {Component} from 'react';\r\nimport './style.css';\r\n\r\nclass AddTodo extends Component{\r\n    state={\r\n        contenet:\"\"\r\n    }\r\nhandleChange=(e)=>{\r\n    //console.log(e.target.value);\r\n    this.setState({\r\n        content:e.target.value\r\n    })\r\n\r\n}\r\nhandleSubmit=(e)=>{\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state);\r\n    this.setState({\r\n        content:''\r\n    })\r\n    \r\n\r\n}\r\n\r\n    render(){   \r\n        return(\r\n        <div className=\"addtodo\">\r\n            <form onSubmit={this.handleSubmit}>\r\n                <label htmlFor=\"addtodo\">Add Todo</label>\r\n                <input value={this.state.content||''} onChange={this.handleChange}  type=\"text\"></input>\r\n            </form>\r\n        </div>\r\n        );\r\n    }\r\n}\r\nexport default AddTodo;","import React from 'react';\nimport Todos from './Components/Todo';\nimport AddTodo from './Components/AddTodo';\n\nclass TodoList extends React.Component{\n  state={\n    todos:[\n      {id:1,content:\"Do Homework\"},\n      {id:2,content:\"go to dinner\"}\n    ],\n    message:''\n\n  };\n  deleteTodo=(id)=>{\n    const todos=this.state.todos.filter(todo=>{\n      return todo.id!==id;\n    })\n   this.setState({\n     todos:todos,\n     message:'Task has been removed successfully',\n     classMessage:'danger'\n   })\n   setTimeout(()=>{\n    this.setState({\n      message:''\n    })\n  },2000)\n  }\n  addTodo=(todo)=>{\n    todo.id=Math.floor(Math.random()*100);\n    const todos=[...this.state.todos,todo];\n    this.setState({\n      todos:todos,\n      message:'New todo has beem added successfully',\n      classMessage:'success'\n    })\n    setTimeout(()=>{\n      this.setState({\n        message:''\n      })\n    },2000)\n  }\n  render(){\n    const message=this.state.message!==''?( \n      <div className={`message ${this.state.classMessage}`}>\n        <p>{this.state.message}</p>\n      </div>\n    ):(<p></p>)\n    return(\n      <div className=\"app\">\n        <h1>My Todo App </h1>\n        {message}\n        <Todos deleteTodo={this.deleteTodo} todos={this.state.todos}/>\n        <AddTodo addTodo={this.addTodo}/>\n      </div>\n    )\n  }\n}\nexport default TodoList;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}